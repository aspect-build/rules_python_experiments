"""Declare runtime dependencies

These are needed for local dev, and users must install them as well.
See https://docs.bazel.build/versions/main/skylark/deploying.html#dependencies
"""

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
load("//python/private:toolchains_repo.bzl", "PLATFORMS", "toolchains_repo")
load("//python/private:versions.bzl", "MINOR_MAPPING", "RELEASE_DATE", "RELEASE_URL", "TOOL_VERSIONS")

# WARNING: any changes in this function may be BREAKING CHANGES for users
# because we'll fetch a dependency which may be different from one that
# they were previously fetching later in their WORKSPACE setup, and now
# ours took precedence. Such breakages are challenging for users, so any
# changes in this function should be marked as BREAKING in the commit message
# and released only in semver majors.
def rules_python_experiments_dependencies():
    # The minimal version of bazel_skylib we require
    maybe(
        http_archive,
        name = "bazel_skylib",
        sha256 = "c6966ec828da198c5d9adbaa94c05e3a1c7f21bd012a0b29ba8ddbccb2c93b0d",
        urls = [
            "https://github.com/bazelbuild/bazel-skylib/releases/download/1.1.1/bazel-skylib-1.1.1.tar.gz",
            "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.1.1/bazel-skylib-1.1.1.tar.gz",
        ],
    )

########
# Remaining content of the file is only used to support toolchains.
########
_DOC = "Fetch external tools needed for python toolchain"
_ATTRS = {
    "python_version": attr.string(mandatory = True, values = TOOL_VERSIONS.keys() + MINOR_MAPPING.keys()),
    "platform": attr.string(mandatory = True, values = PLATFORMS.keys()),
}

def _python_repo_impl(rctx):
    version = rctx.attr.python_version
    if version in MINOR_MAPPING:
        version = MINOR_MAPPING[version]
    release_filename = "cpython-{version}-{platform}-pgo+lto-{release_date}.tar.zst".format(
        release_date = RELEASE_DATE,
        version = version,
        platform = rctx.attr.platform,
    )
    url = "{release_url}/{release_filename}".format(
        release_url = RELEASE_URL,
        release_filename = release_filename,
    )
    rctx.download(
        url = url,
        integrity = TOOL_VERSIONS[version][rctx.attr.platform],
        output = release_filename,
    )
    unzstd = rctx.which("unzstd")
    if not unzstd:
        fail("Missing unzstd: please install zstd https://github.com/facebook/zstd")
    exec_result = rctx.execute([
        "tar",
        "--extract",
        "--strip-components=2",
        "--use-compress-program=unzstd",
        "--file={}".format(release_filename),
    ])
    if exec_result.return_code:
        fail(exec_result.stderr)

    build_content = """\
# Generated by python/repositories.bzl

load("@bazel_tools//tools/python:toolchain.bzl", "py_runtime_pair")

filegroup(
    name = "files",
    srcs = glob(["bin/**", "lib/**", "include/**", "share/**"]),
)

exports_files(["bin/python3"])

py_runtime(
    name = "py2_runtime",
    interpreter_path = "/bin/false",
    python_version = "PY2",
)

py_runtime(
    name = "py3_runtime",
    interpreter = "bin/python3",
    python_version = "PY3",
)

py_runtime_pair(
    name = "python_runtimes",
    py2_runtime = ":py2_runtime",
    py3_runtime = ":py3_runtime",
)
"""

    # Base BUILD file for this repository
    rctx.file("BUILD.bazel", build_content)

python_repositories = repository_rule(
    _python_repo_impl,
    doc = _DOC,
    attrs = _ATTRS,
)

# Wrapper macro around everything above, this is the primary API
def python_register_toolchains(name, **kwargs):
    """Convenience macro for users which does typical setup.

    - Create a repository for each built-in platform like "python_linux_amd64" -
      this repository is lazily fetched when Python is needed for that platform.
    - TODO: create a convenience repository for the host platform like "python_host".
    - Create a repository exposing toolchains for each platform like "python_platforms".
    - Register a toolchain pointing at each platform.
    Users can avoid this macro and do these steps themselves, if they want more control.
    Args:
        name: base name for all created repos, like "python38".
        **kwargs: passed to each python_repositories call.
    """
    for platform in PLATFORMS.keys():
        python_repositories(
            name = name + "_" + platform,
            platform = platform,
            **kwargs
        )
        native.register_toolchains("@%s_toolchains//:%s_toolchain" % (name, platform))

    toolchains_repo(
        name = name + "_toolchains",
        user_repository_name = name,
    )
